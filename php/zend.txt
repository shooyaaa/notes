  1.  compile php的git分支先运行./buildconf --force重新生成configure文件否则会报错,如果没有安装libxml2-dev会提示找不到xml22-config
  2. configure 的时候加上--enable-debug参数可以编译debug版本的php，调试ext的时候可以直接在文件行号加断点，有时候一些变量可能需要代码运行到特定位置的才会初始化，mac下面调试的话打印全局变量有问题

  3. Zend 有一个全局的变量executor_globals来保存基本上所有php的相关变量

  4. 赋值的zend相关函数式zend_do_assign

  5. 在gdb里面导入php源码根目录的(source .gdbinit)文件, 有很多预定义的函数可以使用print_ht(&ht)可以打印hashtable

  6. zval的定义在zend.h里面（zvalue_value）

  7. php 脚本执行顺序呢php_execute_scripts -> zend_execute_scripts -> zend_compile_file(可以hook，默认是zend_language_scanner.l里面的compile_file) -> zend_execute(可以hook，执行op_array)
        其中compile_file调用zendparse（yyparse的别名, 会调用lex_scan做词法分析）去把php脚本转换成op_array

  8. 如何追踪php代码的执行过程，gdb php，运行你的php文件(r test.php), 在zend_execute加断点(b zend_execute),p op_array->opcodes[0]打印出你希望看的代码的opcode，在输出中查看opcode的handler （handler = 0x9326f1 <ZEND_INIT_ARRAY_SPEC_CONST_UNUSED_HANDLER>)在handler加断点。
    如果handler只是一个地址可以通过这个指令打印出handler：php5 p {int (zend_execute_data *)}op_array->opcodes[0]->handler, php7 (opcode_handler_t) op_array->    opcodes[0]->handler

 9. 你声明的全局变量都在executor_globals->symbol_table里面，如何打印出一个zval里面的数组先打印初zval，然后拿到zval->value里面ht的地址address，直接调用print_ht address就可以了，当然你要先source .gdbinit

10. 在gdb中使用bt可以查看栈调用

11. phpdbg -p* <test.php>可以查看opcodes

12. 在编译的时候znode 数据结构会传给lex_scan做词法分析，然后结果就在zendlval里面:
